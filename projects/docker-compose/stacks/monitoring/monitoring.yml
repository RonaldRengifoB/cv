version: "3.7"

services:
  grafana:
    image: grafana/grafana-oss:latest
    container_name: $GRAFANA_SERVICE_NAME
    restart: always
    user: $PUID #uid for axl  
    environment:
    - GF_SERVER_DOMAIN=$GRAFANA_ADDR_NAME.$DOMAIN
    - GF_INSTALL_PLUGINS=grafana-clock-panel,yesoreyeram-infinity-datasource 
    ports:
    - 3000:3000
#    labels:
#    - traefik.enable=true 
#    - traefik.http.routers.$GRAFANA_SERVICE_NAME.rule=Host(`$GRAFANA_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$GRAFANA_SERVICE_NAME.entrypoints=web
#    - traefik.http.routers.$GRAFANA_SERVICE_NAME-https.rule=Host(`$GRAFANA_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$GRAFANA_SERVICE_NAME-https.entrypoints=webs
#    - traefik.http.routers.$GRAFANA_SERVICE_NAME-https.tls=true
#    - traefik.http.routers.$GRAFANA_SERVICE_NAME-https.service=$GRAFANA_SERVICE_NAME
#    - traefik.http.routers.$GRAFANA_SERVICE_NAME-https.tls.certresolver=$CERTRESOLVER
#    - traefik.http.services.$GRAFANA_SERVICE_NAME.loadbalancer.server.port=3000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - type: volume
        source: grafana
        target: /var/lib/grafana
        volume:
          nocopy: true  
    networks:
    - monitoring  

  prometheus:
    image: prom/prometheus:latest
    container_name: $PROMETHEUS_SERVICE_NAME
    restart: always
    ports:
    - 9090:9090
#    labels:
#    - traefik.enable=true 
#    - traefik.http.routers.$PROMETHEUS_SERVICE_NAME.rule=Host(`$PROMETHEUS_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$PROMETHEUS_SERVICE_NAME.entrypoints=web
#    - traefik.http.routers.$PROMETHEUS_SERVICE_NAME-https.rule=Host(`$PROMETHEUS_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$PROMETHEUS_SERVICE_NAME-https.entrypoints=webs
#    - traefik.http.routers.$PROMETHEUS_SERVICE_NAME-https.tls=true
#    - traefik.http.routers.$PROMETHEUS_SERVICE_NAME-https.service=$PROMETHEUS_SERVICE_NAME
#    - traefik.http.routers.$PROMETHEUS_SERVICE_NAME-https.tls.certresolver=$CERTRESOLVER
#    - traefik.http.services.$PROMETHEUS_SERVICE_NAME.loadbalancer.server.port=9090
    configs:
      - source: prometheus
        target: /etc/prometheus/prometheus-config.yml    
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - type: volume
        source: prometheus
        target: /prometheus
        volume:
          nocopy: true  
    command:
    - '--config.file=/etc/prometheus/prometheus-config.yml'
    - '--storage.tsdb.path=/prometheus'
    - '--storage.tsdb.retention.time=30d' #data retention to 30 days
    - '--web.enable-lifecycle'
    networks:
    - monitoring
    user: '1000' #uid for axl  

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: $NODE_EXPORTER_SERVICE_NAME
    restart: always
    ports:
      - 9100:9100
    command:
    - '--path.rootfs=/host'
    pid: host
    volumes:
    - /etc/localtime:/etc/localtime:ro
    - /etc/timezone:/etc/timezone:ro
    - '/:/host:ro,rslave'
    networks:
    - monitoring  

  snmp_exporter:
    image: prom/snmp-exporter
    container_name: $SNMP_EXPORTER_SERVICE_NAME
    restart: always
    configs:
      - source: snmp-exporter
        target: /etc/snmp_exporter/snmp_exporter-config.yml
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    command:
    - '--config.file=/etc/snmp_exporter/snmp_exporter-config.yml'
    networks:
    - monitoring
    ports:
    - 9116:9116

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: $CADVISOR_SERVICE_NAME
    restart: always
    ports:
    - 9101:8080
    volumes:
    - /etc/localtime:/etc/localtime:ro
    - /etc/timezone:/etc/timezone:ro
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    networks:
    - monitoring

#  influxdb:
#    container_name: $INFLUXDB_SERVICE_NAME
#    image: influxdb:2.1-alpine
#    ports:
#    - 8086:8086
#    labels:
#    - traefik.enable=true 
#    - traefik.http.routers.$INFLUXDB_SERVICE_NAME.rule=Host(`$INFLUXDB_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$INFLUXDB_SERVICE_NAME.entrypoints=web
#    - traefik.http.routers.$INFLUXDB_SERVICE_NAME-https.rule=Host(`$INFLUXDB_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$INFLUXDB_SERVICE_NAME-https.entrypoints=webs
#    - traefik.http.routers.$INFLUXDB_SERVICE_NAME-https.tls=true
#    - traefik.http.routers.$INFLUXDB_SERVICE_NAME-https.service=$INFLUXDB_SERVICE_NAME
#    - traefik.http.routers.$INFLUXDB_SERVICE_NAME-https.tls.certresolver=$CERTRESOLVER
#    - traefik.http.services.$INFLUXDB_SERVICE_NAME.loadbalancer.server.port=8086
#    user: '1000' #uid for axl 
#    volumes:
#      - /etc/localtime:/etc/localtime:ro
#      - /etc/timezone:/etc/timezone:ro
#      - type: volume
#        source: influxdb-data
#        target: /var/lib/influxdb2
#        volume:
#          nocopy: true
#      - type: volume
#        source: influxdb-config
#        target: /etc/influxdb2
#        volume:
#          nocopy: true    
#    networks:
#    - monitoring
#    restart: always
  
  uptimekuma:
    image: louislam/uptime-kuma:latest
    container_name: $UPTIMEKUMA_SERVICE_NAME
    environment:
    - PUID=$PUID
    - PGID=$PGID
    ports:
    - "3001:3001"
#    labels:
#    - traefik.enable=true 
#    - traefik.http.routers.$UPTIMEKUMA_SERVICE_NAME.rule=Host(`$UPTIMEKUMA_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$UPTIMEKUMA_SERVICE_NAME.entrypoints=web
#    - traefik.http.routers.$UPTIMEKUMA_SERVICE_NAME-https.rule=Host(`$UPTIMEKUMA_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$UPTIMEKUMA_SERVICE_NAME-https.entrypoints=webs
#    - traefik.http.routers.$UPTIMEKUMA_SERVICE_NAME-https.tls=true
#    - traefik.http.routers.$UPTIMEKUMA_SERVICE_NAME-https.service=$UPTIMEKUMA_SERVICE_NAME
#    - traefik.http.routers.$UPTIMEKUMA_SERVICE_NAME-https.tls.certresolver=$CERTRESOLVER
#    - traefik.http.services.$UPTIMEKUMA_SERVICE_NAME.loadbalancer.server.port=3001
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - type: volume
        source: uptime-kuma
        target: /app/data
        volume:
          nocopy: true  
    networks:
    - monitoring  
    restart: always

  unifipoller:
    image: ghcr.io/unpoller/unpoller:latest
    container_name: $UP_SERVICE_NAME
    environment:
      - UP_PROMETHEUS_DISABLE=$UP_PROMETHEUS_DISABLE
      - UP_INFLUXDB_BUCKET=$UP_INFLUXDB_BUCKET
      - UP_INFLUXDB_AUTH_TOKEN=$UP_INFLUXDB_AUTH_TOKEN
      - UP_INFLUXDB_URL=$UP_INFLUXDB_URL
      - UP_INFLUXDB_ORG=$UP_INFLUXDB_ORG
      - UP_POLLER_DEBUG=$UP_POLLER_DEBUG      
      - UP_UNIFI_DEFAULT_USER=$UP_UNIFI_DEFAULT_USER
      - UP_UNIFI_DEFAULT_PASS=$UP_UNIFI_DEFAULT_PASS
      - UP_UNIFI_DEFAULT_URL=$UP_UNIFI_DEFAULT_URL
      - UP_UNIFI_DEFAULT_SAVE_DPI=$UP_UNIFI_DEFAULT_SAVE_DPI
    volumes:
    - /etc/localtime:/etc/localtime:ro
    - /etc/timezone:/etc/timezone:ro
    networks:
      - monitoring  
    restart: always

  elasticsearch:
    image: elasticsearch:latest
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    configs:
      - source: elasticsearch
        target: /usr/share/elasticsearch/elasticsearch.yml
    volumes:
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data/
        volume:
          nocopy: true  
    environment:
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=0.0.0.0
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
    networks:
      - monitoring

  logstash:
    image: logstash::latest
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    configs:
      - source: logstash
        target: /usr/share/filebeat/logstash.yml
      - source: logstash-conf
        target: /usr/share/filebeat/filebeat.conf
    volumes:
      - type: volume
        source: logstash
        target: /usr/share/logstash/data
        volume:
          nocopy: true  
    networks:
      - monnitoring
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:latest
    container_name: kibana
    ports:
      - "5601:5601"
    configs:
      - source: kibana
        target: /usr/share/kibana/kibana.yml
    volumes:
      - type: volume
        source: kibana
        target: /usr/share/kibana/data
        volume:
          nocopy: true  
    networks:
      - monitoring
    depends_on:
      - elasticsearch

  filebeat:
    image: filebea::latest
    hostname: filebeat
    user: root
    configs:
      - source: filebeat
        target: /usr/share/filebeat/filebeat.yml
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers/:/var/lib/docker/containers/:ro
      - /var/log/:/var/log/:ro
      - /var/log/audit/:/var/log/audit/:ro
      - type: volume
        source: filebeat
        target: /usr/share/filebeat/data
        volume:
          nocopy: true  
    environment:
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST:-node1}
      - KIBANA_HOST=${KIBANA_HOST:-node1}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME:-elastic}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-changeme}
    command: ["--strict.perms=false"]
    networks:
      - monitoring


  watchtower:
    image: containrrr/watchtower
    container_name: $WATCHTOWER_SERVICE_NAME
    environment:
    - WATCHTOWER_NOTIFICATIONS=$WATCHTOWER_NOTIFICATIONS
    - WATCHTOWER_NOTIFICATION_EMAIL_FROM=$WATCHTOWER_NOTIFICATION_EMAIL_FROM
    - WATCHTOWER_NOTIFICATION_EMAIL_TO=$WATCHTOWER_NOTIFICATION_EMAIL_TO
    - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=$WATCHTOWER_NOTIFICATION_EMAIL_SERVER
    - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=$WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT
    - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=$WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER
    - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=$WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD
    - WATCHTOWER_NOTIFICATION_EMAIL_DELAY=$WATCHTOWER_NOTIFICATION_EMAIL_DELAY
    - WATCHTOWER_CLEANUP=true
    - WATCHTOWER_SCHEDULE=0 0 2 * * ?
    volumes:
    - /etc/localtime:/etc/localtime:ro
    - /etc/timezone:/etc/timezone:ro
    - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - monitoring  
    restart: always

networks:
  monitoring:
    name: monitoring
    ipam:
      driver: default
      config:
        - subnet: $MONITORING_SUBNET
          gateway: $MONITORING_GW

configs:
  filebeat:
    file: /mnt/docker/ymls/filebeat.yml
  elasticsearch:
    file: /mnt/docker/ymls/elasticsearch.yml
  kibana:
    file: /mnt/docker/ymls/kibana.yml
  logstash:
    file: /mnt/docker/ymls/logstash.yml
  logstash-conf:
    file: /mnt/docker/ymls/logstash.conf
  snmp-exporter:
    file: /mnt/docker/ymls/snmp_exporter-config.yml
  prometheus:
    file: /mnt/docker/ymls/prometheus-config.yml

volumes:
  grafana:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/grafana"
  
  prometheus:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/prometheus"   

#  influxdb-data:
#    driver_opts:
#      type: "nfs4"
#      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
#      device: "$NAS_PATH/influxdb/data"

#  influxdb-config:
#    driver_opts:
#      type: "nfs4"
#      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
#      device: "$NAS_PATH/influxdb/config"

  uptime-kuma:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/uptime-kuma"
  
  elasticsearch:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/elasticsearch"
  
  logstash:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/logstash"
  
  kibana:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/kibana"

  filebeat:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/filebeat"