version: "3.7"

services:
  grafana:
    image: grafana/grafana-oss:latest
    container_name: $GRAFANA_SERVICE_NAME
    restart: unless-stopped
    user: $PUID #uid for axl  
    ports:
    - 3000:3000
#    labels:
#    - traefik.enable=true 
#    - traefik.http.routers.$GRAFANA_SERVICE_NAME.rule=Host(`$GRAFANA_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$GRAFANA_SERVICE_NAME.entrypoints=web
#    - traefik.http.routers.$GRAFANA_SERVICE_NAME-https.rule=Host(`$GRAFANA_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$GRAFANA_SERVICE_NAME-https.entrypoints=webs
#    - traefik.http.routers.$GRAFANA_SERVICE_NAME-https.tls=true
#    - traefik.http.routers.$GRAFANA_SERVICE_NAME-https.service=$GRAFANA_SERVICE_NAME
#    - traefik.http.routers.$GRAFANA_SERVICE_NAME-https.tls.certresolver=$CERTRESOLVER
#    - traefik.http.services.$GRAFANA_SERVICE_NAME.loadbalancer.server.port=3000
    volumes:
      - type: volume
        source: grafana
        target: /var/lib/grafana
        volume:
          nocopy: true  
    networks:
    - monitoring  

  prometheus:
    image: prom/prometheus:latest
    container_name: $PROMETHEUS_SERVICE_NAME
    restart: unless-stopped
    command:
    - '--config.file=/etc/prometheus/prometheus-config.yml'
    - '--storage.tsdb.path=/prometheus'
    - '--storage.tsdb.retention.time=30d' #data retention to 30 days
    - '--web.enable-lifecycle'
    ports:
    - 9090:9090
#    labels:
#    - traefik.enable=true 
#    - traefik.http.routers.$PROMETHEUS_SERVICE_NAME.rule=Host(`$PROMETHEUS_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$PROMETHEUS_SERVICE_NAME.entrypoints=web
#    - traefik.http.routers.$PROMETHEUS_SERVICE_NAME-https.rule=Host(`$PROMETHEUS_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$PROMETHEUS_SERVICE_NAME-https.entrypoints=webs
#    - traefik.http.routers.$PROMETHEUS_SERVICE_NAME-https.tls=true
#    - traefik.http.routers.$PROMETHEUS_SERVICE_NAME-https.service=$PROMETHEUS_SERVICE_NAME
#    - traefik.http.routers.$PROMETHEUS_SERVICE_NAME-https.tls.certresolver=$CERTRESOLVER
#    - traefik.http.services.$PROMETHEUS_SERVICE_NAME.loadbalancer.server.port=9090
    volumes:
      - /mnt/docker/ymls:/etc/prometheus
      - type: volume
        source: prometheus
        target: /prometheus
        volume:
          nocopy: true  
    networks:
    - monitoring
    user: '1000' #uid for axl  

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: $NODE_EXPORTER_SERVICE_NAME
    restart: unless-stopped
    expose:
      - 9100
    command:
    - '--path.rootfs=/host'
    pid: host
    volumes:
    - '/:/host:ro,rslave'
    networks:
    - monitoring  

  snmp_exporter:
    image: prom/snmp-exporter
    container_name: $SNMP_EXPORTER_SERVICE_NAME
    restart: unless-stopped
    volumes:
      - /mnt/docker/ymls/:/etc/snmp_exporter/
    expose:
      - 9116
    command:
    - '--config.file=/etc/snmp_exporter/snmp_exporter-config.yml'
    networks:
    - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: $CADVISOR_SERVICE_NAME
    restart: unless-stopped
    expose:
    - 8080
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    networks:
    - monitoring

  influxdb:
    container_name: $INFLUXDB_SERVICE_NAME
    image: influxdb:2.1-alpine
    ports:
    - 8086:8086
#    labels:
#    - traefik.enable=true 
#    - traefik.http.routers.$INFLUXDB_SERVICE_NAME.rule=Host(`$INFLUXDB_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$INFLUXDB_SERVICE_NAME.entrypoints=web
#    - traefik.http.routers.$INFLUXDB_SERVICE_NAME-https.rule=Host(`$INFLUXDB_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$INFLUXDB_SERVICE_NAME-https.entrypoints=webs
#    - traefik.http.routers.$INFLUXDB_SERVICE_NAME-https.tls=true
#    - traefik.http.routers.$INFLUXDB_SERVICE_NAME-https.service=$INFLUXDB_SERVICE_NAME
#    - traefik.http.routers.$INFLUXDB_SERVICE_NAME-https.tls.certresolver=$CERTRESOLVER
#    - traefik.http.services.$INFLUXDB_SERVICE_NAME.loadbalancer.server.port=8086
    user: '1000' #uid for axl 
    volumes:
      - type: volume
        source: influxdb-data
        target: /var/lib/influxdb2
        volume:
          nocopy: true
      - type: volume
        source: influxdb-config
        target: /etc/influxdb2
        volume:
          nocopy: true    
    networks:
    - monitoring
    restart: unless-stopped
  
  loki:
    image: grafana/loki:latest
    container_name: $LOKI_SERVICE_NAME
    ports:
    - 3100:3100
    volumes:
    - /mnt/docker/ymls:/etc/loki
    command:
    - '--config.file=/etc/loki/loki-config.yml'    
    networks:
    - monitoring  
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: $PROMTAIL_SERVICE_NAME
    volumes:
    - /var/log:/var/log
    - /mnt/docker/ymls:/etc/promtail
    command:
    - '--config.file=/etc/promtail/promtail-config.yml'    
    networks:
    - monitoring  
    restart: unless-stopped

  uptimekuma:
    image: louislam/uptime-kuma:latest
    container_name: $UPTIMEKUMA_SERVICE_NAME
    environment:
    - PUID=$PUID
    - PGID=$PGID
    ports:
    - "3001:3001"
#    labels:
#    - traefik.enable=true 
#    - traefik.http.routers.$UPTIMEKUMA_SERVICE_NAME.rule=Host(`$UPTIMEKUMA_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$UPTIMEKUMA_SERVICE_NAME.entrypoints=web
#    - traefik.http.routers.$UPTIMEKUMA_SERVICE_NAME-https.rule=Host(`$UPTIMEKUMA_ADDR_NAME.$DOMAIN`)
#    - traefik.http.routers.$UPTIMEKUMA_SERVICE_NAME-https.entrypoints=webs
#    - traefik.http.routers.$UPTIMEKUMA_SERVICE_NAME-https.tls=true
#    - traefik.http.routers.$UPTIMEKUMA_SERVICE_NAME-https.service=$UPTIMEKUMA_SERVICE_NAME
#    - traefik.http.routers.$UPTIMEKUMA_SERVICE_NAME-https.tls.certresolver=$CERTRESOLVER
#    - traefik.http.services.$UPTIMEKUMA_SERVICE_NAME.loadbalancer.server.port=3001
    volumes:
      - type: volume
        source: uptime-kuma
        target: /app/data
        volume:
          nocopy: true  
    networks:
    - monitoring  
    restart: unless-stopped

  unifipoller:
    image: ghcr.io/unpoller/unpoller:latest
    container_name: $UP_SERVICE_NAME
    environment:
      - UP_PROMETHEUS_DISABLE=$UP_PROMETHEUS_DISABLE
      - UP_INFLUXDB_BUCKET=$UP_INFLUXDB_BUCKET
      - UP_INFLUXDB_AUTH_TOKEN=$UP_INFLUXDB_AUTH_TOKEN
      - UP_INFLUXDB_URL=$UP_INFLUXDB_URL
      - UP_INFLUXDB_ORG=$UP_INFLUXDB_ORG
      - UP_POLLER_DEBUG=$UP_POLLER_DEBUG      
      - UP_UNIFI_DEFAULT_USER=$UP_UNIFI_DEFAULT_USER
      - UP_UNIFI_DEFAULT_PASS=$UP_UNIFI_DEFAULT_PASS
      - UP_UNIFI_DEFAULT_URL=$UP_UNIFI_DEFAULT_URL
      - UP_UNIFI_DEFAULT_SAVE_DPI=$UP_UNIFI_DEFAULT_SAVE_DPI
    networks:
      - monitoring  
    restart: unless-stopped

  watchtower:
    image: containrrr/watchtower
    container_name: $WATCHTOWER_SERVICE_NAME
    environment:
    - WATCHTOWER_NOTIFICATIONS=$WATCHTOWER_NOTIFICATIONS
    - WATCHTOWER_NOTIFICATION_EMAIL_FROM=$WATCHTOWER_NOTIFICATION_EMAIL_FROM
    - WATCHTOWER_NOTIFICATION_EMAIL_TO=$WATCHTOWER_NOTIFICATION_EMAIL_TO
    - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=$WATCHTOWER_NOTIFICATION_EMAIL_SERVER
    - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=$WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT
    - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=$WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER
    - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=$WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD
    - WATCHTOWER_NOTIFICATION_EMAIL_DELAY=$WATCHTOWER_NOTIFICATION_EMAIL_DELAY
    - WATCHTOWER_CLEANUP=true
    - WATCHTOWER_SCHEDULE=0 0 2 * * ?
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - monitoring  
    restart: unless-stopped

networks:
  monitoring:
    name: monitoring
    ipam:
      driver: default
      config:
        - subnet: $MONITORING_SUBNET
          gateway: $MONITORING_GW

volumes:
  grafana:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/grafana"
  prometheus:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/prometheus"   
  influxdb-data:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/influxdb/data"
  influxdb-config:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/influxdb/config"
  uptime-kuma:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/uptime-kuma"