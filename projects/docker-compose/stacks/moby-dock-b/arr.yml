version: "3.2"
services:
  homarr:
    image: ghcr.io/ajnart/homarr:latest
    container_name: $HOMEARR_SERVICE_NAME
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - type: volume
        source: homearr-configs
        target: /app/data/configs
        volume:
          nocopy: true
      - type: volume
        source: homearr-icons
        target: /app/public/icons
        volume:
          nocopy: true
      - type: volume
        source: homearr-data
        target: /data
        volume:
          nocopy: true
    networks:
      - arr
    ports:
      - '7575:7575'
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: $PROWLARR_SERVICE_NAME
    environment:
      - PUID=$PUID
      - PGID=$PGID
#    labels:
#      - traefik.enable=true 
#      - traefik.http.routers.$PROWLARR_SERVICE_NAME.rule=Host(`$PROWLARR_ADDR_NAME.$DOMAIN`)
#      - traefik.http.routers.$PROWLARR_SERVICE_NAME.entrypoints=web
#      - traefik.http.routers.$PROWLARR_SERVICE_NAME-https.rule=Host(`$PROWLARR_ADDR_NAME.$DOMAIN`)
#      - traefik.http.routers.$PROWLARR_SERVICE_NAME-https.entrypoints=webs
#      - traefik.http.routers.$PROWLARR_SERVICE_NAME-https.tls=true
#      - traefik.http.routers.$PROWLARR_SERVICE_NAME-https.service=$PROWLARR_SERVICE_NAME
#      - traefik.http.routers.$PROWLARR_SERVICE_NAME-https.tls.certresolver=$CERTRESOLVER
#      - traefik.http.services.$PROWLARR_SERVICE_NAME.loadbalancer.server.port=9696
    volumes:
    - /etc/localtime:/etc/localtime:ro
    - /etc/timezone:/etc/timezone:ro    
    - type: volume
      source: prowlarr
      target: /config
      volume:
        nocopy: true
    networks:
      - arr
    ports:
      - 9696:9696
    restart: unless-stopped  
  
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: $SONARR_SERVICE_NAME
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
#    labels:
#      - traefik.enable=true 
#      - traefik.http.routers.$SONARR_SERVICE_NAME.rule=Host(`$SONARR_ADDR_NAME.$DOMAIN`)
#      - traefik.http.routers.$SONARR_SERVICE_NAME.entrypoints=web
#      - traefik.http.routers.$SONARR_SERVICE_NAME-https.rule=Host(`$SONARR_ADDR_NAME.$DOMAIN`)
#      - traefik.http.routers.$SONARR_SERVICE_NAME-https.entrypoints=webs
#      - traefik.http.routers.$SONARR_SERVICE_NAME-https.tls=true
#      - traefik.http.routers.$SONARR_SERVICE_NAME-https.service=$SONARR_SERVICE_NAME
#      - traefik.http.routers.$SONARR_SERVICE_NAME-https.tls.certresolver=$CERTRESOLVER
#      - traefik.http.services.$SONARR_SERVICE_NAME.loadbalancer.server.port=8989
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /mnt/data:/data
      - type: volume
        source: sonarr
        target: /config
        volume:
          nocopy: true
    networks:
      - arr
    ports:
      - 8989:8989
    restart: unless-stopped
  
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: $RADARR_SERVICE_NAME
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
#    labels:
#      - traefik.enable=true 
#      - traefik.http.routers.$RADARR_SERVICE_NAME.rule=Host(`$RADARR_ADDR_NAME.$DOMAIN`)
#      - traefik.http.routers.$RADARR_SERVICE_NAME.entrypoints=web
#      - traefik.http.routers.$RADARR_SERVICE_NAME-https.rule=Host(`$RADARR_ADDR_NAME.$DOMAIN`)
#      - traefik.http.routers.$RADARR_SERVICE_NAME-https.entrypoints=webs
#      - traefik.http.routers.$RADARR_SERVICE_NAME-https.tls=true
#      - traefik.http.routers.$RADARR_SERVICE_NAME-https.service=$RADARR_SERVICE_NAME
#      - traefik.http.routers.$RADARR_SERVICE_NAME-https.tls.certresolver=$CERTRESOLVER
#      - traefik.http.services.$RADARR_SERVICE_NAME.loadbalancer.server.port=7878
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro    
      - /mnt/data:/data
      - type: volume
        source: radarr
        target: /config
        volume:
          nocopy: true
    networks:
      - arr
    ports:
      - 7878:7878
    restart: unless-stopped
  
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: $BAZARR_SERVICE_NAME
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
#    labels:
#      - traefik.enable=true 
#      - traefik.http.routers.$BAZARR_SERVICE_NAME.rule=Host(`$BAZARR_ADDR_NAME.$DOMAIN`)
#      - traefik.http.routers.$BAZARR_SERVICE_NAME.entrypoints=web
#      - traefik.http.routers.$BAZARR_SERVICE_NAME-https.rule=Host(`$BAZARR_ADDR_NAME.$DOMAIN`)
#      - traefik.http.routers.$BAZARR_SERVICE_NAME-https.entrypoints=webs
#      - traefik.http.routers.$BAZARR_SERVICE_NAME-https.tls=true
#      - traefik.http.routers.$BAZARR_SERVICE_NAME-https.service=$BAZARR_SERVICE_NAME
#      - traefik.http.routers.$BAZARR_SERVICE_NAME-https.tls.certresolver=$CERTRESOLVER
#      - traefik.http.services.$BAZARR_SERVICE_NAME.loadbalancer.server.port=6767
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro    
      - /mnt/data:/data
      - type: volume
        source: bazarr
        target: /config
        volume:
          nocopy: true
    networks:
      - arr
    ports:
      - 6767:6767
    restart: unless-stopped

  qbitrr:
    image: feramance/qbitrr:latest
    container_name: $QBITRR_SERVICE_NAME
    user: $PUID:$PGID
    environment:
      - TZ=$TZ
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /mnt/data/torrents:/data/torrents
      - type: volume
        source: qbitrr
        target: /config
        volume:
          nocopy: true
    networks:
      - arr
    restart: unless-stopped


  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: $FLARESOLVERR_SERVICE_NAME
    environment:
      - LOG_LEVEL=$FLARESOLVERR_LOG_LEVEL
      - LOG_HTML=$FLARESOLVERR_LOG_HTML
      - CAPTCHA_SOLVER=$FLARESOLVERR_CAPTCHA_SOLVER
      - TZ=$TZ
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks:
      - arr
    ports:
      - 8191:8191
    restart: unless-stopped

  autobrr:
    container_name: $AUTOBRR_SERVICE_NAME
    image: ghcr.io/autobrr/autobrr:latest
    user: $PUID:$PGID
    environment:
      - TZ=$TZ
      - AUTOBRR__DATABASE_TYPE=$AUTOBRR_DATABASE_TYPE
      - AUTOBRR__POSTGRES_HOST=$AUTOBRR_POSTGRES_HOST
      - AUTOBRR__POSTGRES_PORT=$AUTOBRR_POSTGRES_PORT
      - AUTOBRR__POSTGRES_DATABASE=$AUTOBRR_POSTGRES_DATABASE
      - AUTOBRR__POSTGRES_USER=$AUTOBRR_POSTGRES_USER
      - AUTOBRR__POSTGRES_PASS=$AUTOBRR_POSTGRES_PASS
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - type: volume
        source: autobrr
        target: /config
        volume:
          nocopy: true
    networks:
      - arr
    ports:
      - 7474:7474
    restart: unless-stopped

  omegabrr:
    container_name: $OMEGABRR_SERVICE_NAME
    image: ghcr.io/autobrr/omegabrr:latest
    user: $PUID:$PGID
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - type: volume
        source: omegabrr
        target: /config
        volume:
          nocopy: true
    networks:
      - arr
    ports:
      - 7441:7441
    restart: unless-stopped

networks:
  arr:
    name: arr
    ipam:
      driver: default
      config:
        - subnet: $ARR_SUBNET
          gateway: $ARR_GW

volumes:
  prowlarr:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/prowlarr"

  sonarr:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/sonarr"

  radarr:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/radarr"    

  bazarr:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/bazarr"

  qbitrr:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/qbitrr"

  autobrr:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/autobrr"
  
  omegabrr:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/omegabrr"

  homearr-configs:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/homearr/configs/"

  homearr-icons:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/homearr/icons/"

  homearr-data:
    driver_opts:
      type: "nfs4"
      o: "addr=$NAS_ADDR,$NAS_MOUNT_PARAMS"
      device: "$NAS_PATH/homearr/data/"